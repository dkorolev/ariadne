//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
AddArguments = module.exports.AddArguments = function(args) {
  this.left_hand_side = null;
  this.right_hand_side = null;
  if (args) {
    if (args.left_hand_side !== undefined) {
      this.left_hand_side = args.left_hand_side;
    }
    if (args.right_hand_side !== undefined) {
      this.right_hand_side = args.right_hand_side;
    }
  }
};
AddArguments.prototype = {};
AddArguments.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.left_hand_side = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.right_hand_side = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddArguments.prototype.write = function(output) {
  output.writeStructBegin('AddArguments');
  if (this.left_hand_side !== null && this.left_hand_side !== undefined) {
    output.writeFieldBegin('left_hand_side', Thrift.Type.I32, 1);
    output.writeI32(this.left_hand_side);
    output.writeFieldEnd();
  }
  if (this.right_hand_side !== null && this.right_hand_side !== undefined) {
    output.writeFieldBegin('right_hand_side', Thrift.Type.I32, 2);
    output.writeI32(this.right_hand_side);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddResult = module.exports.AddResult = function(args) {
  this.sum = null;
  if (args) {
    if (args.sum !== undefined) {
      this.sum = args.sum;
    }
  }
};
AddResult.prototype = {};
AddResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddResult.prototype.write = function(output) {
  output.writeStructBegin('AddResult');
  if (this.sum !== null && this.sum !== undefined) {
    output.writeFieldBegin('sum', Thrift.Type.I32, 1);
    output.writeI32(this.sum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PostArguments = module.exports.PostArguments = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
PostArguments.prototype = {};
PostArguments.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PostArguments.prototype.write = function(output) {
  output.writeStructBegin('PostArguments');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PostResult = module.exports.PostResult = function(args) {
  this.count_so_far = null;
  if (args) {
    if (args.count_so_far !== undefined) {
      this.count_so_far = args.count_so_far;
    }
  }
};
PostResult.prototype = {};
PostResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.count_so_far = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PostResult.prototype.write = function(output) {
  output.writeStructBegin('PostResult');
  if (this.count_so_far !== null && this.count_so_far !== undefined) {
    output.writeFieldBegin('count_so_far', Thrift.Type.I32, 1);
    output.writeI32(this.count_so_far);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Status = module.exports.Status = function(args) {
  this.status = 'OK';
  this.recent = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.recent !== undefined) {
      this.recent = args.recent;
    }
  }
};
Status.prototype = {};
Status.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.recent = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.recent.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Status.prototype.write = function(output) {
  output.writeStructBegin('Status');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 1);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.recent !== null && this.recent !== undefined) {
    output.writeFieldBegin('recent', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.recent.length);
    for (var iter7 in this.recent)
    {
      if (this.recent.hasOwnProperty(iter7))
      {
        iter7 = this.recent[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

