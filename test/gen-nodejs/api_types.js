//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
AddArguments = module.exports.AddArguments = function(args) {
  this.left_hand_side = null;
  this.right_hand_side = null;
  if (args) {
    if (args.left_hand_side !== undefined) {
      this.left_hand_side = args.left_hand_side;
    }
    if (args.right_hand_side !== undefined) {
      this.right_hand_side = args.right_hand_side;
    }
  }
};
AddArguments.prototype = {};
AddArguments.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.left_hand_side = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.right_hand_side = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddArguments.prototype.write = function(output) {
  output.writeStructBegin('AddArguments');
  if (this.left_hand_side !== null && this.left_hand_side !== undefined) {
    output.writeFieldBegin('left_hand_side', Thrift.Type.I32, 1);
    output.writeI32(this.left_hand_side);
    output.writeFieldEnd();
  }
  if (this.right_hand_side !== null && this.right_hand_side !== undefined) {
    output.writeFieldBegin('right_hand_side', Thrift.Type.I32, 2);
    output.writeI32(this.right_hand_side);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddInt64Arguments = module.exports.AddInt64Arguments = function(args) {
  this.i64_left_hand_side = null;
  this.i64_right_hand_side = null;
  if (args) {
    if (args.i64_left_hand_side !== undefined) {
      this.i64_left_hand_side = args.i64_left_hand_side;
    }
    if (args.i64_right_hand_side !== undefined) {
      this.i64_right_hand_side = args.i64_right_hand_side;
    }
  }
};
AddInt64Arguments.prototype = {};
AddInt64Arguments.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.i64_left_hand_side = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.i64_right_hand_side = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddInt64Arguments.prototype.write = function(output) {
  output.writeStructBegin('AddInt64Arguments');
  if (this.i64_left_hand_side !== null && this.i64_left_hand_side !== undefined) {
    output.writeFieldBegin('i64_left_hand_side', Thrift.Type.I64, 1);
    output.writeI64(this.i64_left_hand_side);
    output.writeFieldEnd();
  }
  if (this.i64_right_hand_side !== null && this.i64_right_hand_side !== undefined) {
    output.writeFieldBegin('i64_right_hand_side', Thrift.Type.I64, 2);
    output.writeI64(this.i64_right_hand_side);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddInt64Result = module.exports.AddInt64Result = function(args) {
  this.i64_result = null;
  if (args) {
    if (args.i64_result !== undefined) {
      this.i64_result = args.i64_result;
    }
  }
};
AddInt64Result.prototype = {};
AddInt64Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.i64_result = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddInt64Result.prototype.write = function(output) {
  output.writeStructBegin('AddInt64Result');
  if (this.i64_result !== null && this.i64_result !== undefined) {
    output.writeFieldBegin('i64_result', Thrift.Type.I64, 1);
    output.writeI64(this.i64_result);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PerfTestArguments = module.exports.PerfTestArguments = function(args) {
  this.before = null;
  this.after = null;
  if (args) {
    if (args.before !== undefined) {
      this.before = args.before;
    }
    if (args.after !== undefined) {
      this.after = args.after;
    }
  }
};
PerfTestArguments.prototype = {};
PerfTestArguments.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.before = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.after = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PerfTestArguments.prototype.write = function(output) {
  output.writeStructBegin('PerfTestArguments');
  if (this.before !== null && this.before !== undefined) {
    output.writeFieldBegin('before', Thrift.Type.STRING, 1);
    output.writeString(this.before);
    output.writeFieldEnd();
  }
  if (this.after !== null && this.after !== undefined) {
    output.writeFieldBegin('after', Thrift.Type.STRING, 2);
    output.writeString(this.after);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AsyncTestArguments = module.exports.AsyncTestArguments = function(args) {
  this.value = 'OK';
  this.delay_ms = 500;
  if (args) {
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.delay_ms !== undefined) {
      this.delay_ms = args.delay_ms;
    }
  }
};
AsyncTestArguments.prototype = {};
AsyncTestArguments.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.delay_ms = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AsyncTestArguments.prototype.write = function(output) {
  output.writeStructBegin('AsyncTestArguments');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.delay_ms !== null && this.delay_ms !== undefined) {
    output.writeFieldBegin('delay_ms', Thrift.Type.I32, 2);
    output.writeI32(this.delay_ms);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

